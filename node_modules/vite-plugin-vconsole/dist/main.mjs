// src/main.ts
var parseVConsoleOptions = (config) => Object.keys(config).reduce((code, key) => {
  const value = config[key];
  if (typeof value === "function") {
    if (/^[(f]/.test(value.toString())) {
      code += `${key}: ${value},`;
      return code;
    } else {
      code += `${value},`;
      return code;
    }
  }
  code += `${key}: ${JSON.stringify(config[key])},`;
  return code;
}, "");
var getEventItems = (event, id) => {
  return event.map(
    (ele) => `
    ${id}.on('${ele.eventName}', ${ele.callback})
    `
  ).join(";");
};
var getDynamicConfig = (dynamicConfig) => {
  let configString = "";
  if (!dynamicConfig) {
    return configString;
  }
  for (const key in dynamicConfig) {
    if (typeof dynamicConfig[key] === "string") {
      configString += `${key}: ${dynamicConfig[key]},`;
    }
  }
  return configString;
};
var getPlugins = (plugin) => {
  let plugins = "";
  if (plugin && plugin.length) {
    plugins = plugin.map(
      (e) => `
    const ${e.id} = new VConsole.VConsolePlugin('${e.id}', '${e.name}');
    ${getEventItems(e.event, e.id)}
    vConsole.addPlugin(${e.id})
    `
    ).join(";");
  }
  return plugins;
};
function viteVConsole(opt) {
  const {
    entry,
    enabled = true,
    config = {},
    plugin,
    customHide = false,
    dynamicConfig = {},
    eventListener = ""
  } = opt;
  let entryPath = Array.isArray(entry) ? entry : [entry];
  if (process.platform === "win32")
    entryPath = entryPath.map((item) => item.replace(/\\/g, "/"));
  const enabledTruly = enabled;
  return {
    name: "vite:vconsole",
    enforce: "pre",
    transform(_source, id) {
      if (entryPath.includes(id) && enabledTruly) {
        const code = `/* eslint-disable */;
        import VConsole from 'vconsole';
        // config
        const vConsole = new VConsole({${parseVConsoleOptions(
          config
        )}});
        window.vConsole = vConsole;

        // plugins
        ${getPlugins(plugin)}

        // dynamic config
        window.vConsole.dynamicFunction = function() {
          if (${getDynamicConfig(dynamicConfig).length > 0}) {
            vConsole.setOption({${getDynamicConfig(dynamicConfig)}});
          }
        };
        
        window.vConsole.dynamicChange = {
          value: new Date().getTime()
        };

        window.vConsole.dynamicFunction();

        if (${customHide}) {
          vConsole.hideSwitch();
        }

        // In order to be compatible with old equipment, I used defineProperty. In the future, when proxy covers enough devices, proxy will be used.
        Object.defineProperty(window.vConsole.dynamicChange, 'value', {
          get: function() {
            return this._value;
          },
          set: function(newValue) {
            window.vConsole.dynamicFunction();
            this._value = newValue;
          }
        });

        // eventListener
        ${eventListener}
        /* eslint-enable */${_source}`;
        return {
          code,
          map: null
          // support source map
        };
      }
      return {
        code: _source,
        map: null
        // support source map
      };
    }
  };
}
var main_default = viteVConsole;
export {
  main_default as default,
  viteVConsole
};
