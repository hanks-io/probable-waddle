{
  "version": 3,
  "sources": ["../../@trpc/server/dist/observable-ade1bad8.mjs", "../../@trpc/server/dist/observable/index.mjs"],
  "sourcesContent": ["function identity(x) {\n    return x;\n}\n\n/** @internal */ function pipeFromArray(fns) {\n    if (fns.length === 0) {\n        return identity;\n    }\n    if (fns.length === 1) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce((prev, fn)=>fn(prev), input);\n    };\n}\n\nfunction isObservable(x) {\n    return typeof x === 'object' && x !== null && 'subscribe' in x;\n}\nfunction observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) {\n                    return;\n                }\n                unsubscribed = true;\n                if (typeof teardownRef === 'function') {\n                    teardownRef();\n                } else if (teardownRef) {\n                    teardownRef.unsubscribe();\n                }\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    if (isDone) {\n                        return;\n                    }\n                    observer.next?.(value);\n                },\n                error (err) {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.error?.(err);\n                    unsubscribe();\n                },\n                complete () {\n                    if (isDone) {\n                        return;\n                    }\n                    isDone = true;\n                    observer.complete?.();\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) {\n                unsubscribe();\n            }\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return pipeFromArray(operations)(self);\n        }\n    };\n    return self;\n}\n\nexport { isObservable as i, observable as o };\n", "export { i as isObservable, o as observable } from '../observable-ade1bad8.mjs';\n\nfunction share(_opts) {\n    return (originalObserver)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) {\n                return;\n            }\n            subscription = originalObserver.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        observer.next?.(value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        observer.error?.(error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        observer.complete?.();\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            // \"resetOnRefCountZero\"\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return {\n            subscribe (observer) {\n                refCount++;\n                observers.push(observer);\n                startIfNeeded();\n                return {\n                    unsubscribe () {\n                        refCount--;\n                        resetIfNeeded();\n                        const index = observers.findIndex((v)=>v === observer);\n                        if (index > -1) {\n                            observers.splice(index, 1);\n                        }\n                    }\n                };\n            }\n        };\n    };\n}\n\nfunction map(project) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer) {\n                let index = 0;\n                const subscription = originalObserver.subscribe({\n                    next (value) {\n                        observer.next?.(project(value, index++));\n                    },\n                    error (error) {\n                        observer.error?.(error);\n                    },\n                    complete () {\n                        observer.complete?.();\n                    }\n                });\n                return subscription;\n            }\n        };\n    };\n}\n\nfunction tap(observer) {\n    return (originalObserver)=>{\n        return {\n            subscribe (observer2) {\n                return originalObserver.subscribe({\n                    next (v) {\n                        observer.next?.(v);\n                        observer2.next?.(v);\n                    },\n                    error (v) {\n                        observer.error?.(v);\n                        observer2.error?.(v);\n                    },\n                    complete () {\n                        observer.complete?.();\n                        observer2.complete?.();\n                    }\n                });\n            }\n        };\n    };\n}\n\nclass ObservableAbortError extends Error {\n    constructor(message){\n        super(message);\n        this.name = 'ObservableAbortError';\n        Object.setPrototypeOf(this, ObservableAbortError.prototype);\n    }\n}\n/** @internal */ function observableToPromise(observable) {\n    let abort;\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) {\n                return;\n            }\n            isDone = true;\n            reject(new ObservableAbortError('This operation was aborted.'));\n            obs$.unsubscribe();\n        }\n        const obs$ = observable.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                isDone = true;\n                reject(data);\n                onDone();\n            },\n            complete () {\n                isDone = true;\n                onDone();\n            }\n        });\n        abort = onDone;\n    });\n    return {\n        promise,\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        abort: abort\n    };\n}\n\nexport { map, observableToPromise, share, tap };\n"],
  "mappings": "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",
  "names": ["observable"]
}
